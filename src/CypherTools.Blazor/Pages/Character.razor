@page "/character"
@page "/character/{id:int}"
@using System.Net.Http
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CypherTools.Blazor.Services.SessionService Session

<h2>Character</h2>

@if (character == null)
{
    <span>Loading</span>
}
else
{
    <button @onclick="SaveCharacter">Save</button>
    <input @bind="character.Name" />
    <br />
    <input @bind="character.DiscordWebHook" placeholder="Discord Webhook URL"/>

    <CascadingValue Name="Character" Value="character">

        <CypherTools.Blazor.Components.Character.CharacterPool characterPools="character.Pools" />
        <br />
        <CypherTools.Blazor.Components.Character.CharacterRecoveryRolls characterRecoveryRolls="character.RecoveryRolls" />
        <br />


        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-6">
                    <CypherTools.Blazor.Components.Character.CharacterInventory inventories="character.Inventory" characterId="character.CharacterId" />
                    <br />
                    <CypherTools.Blazor.Components.Character.CharacterAttackList characterAttacks="character.Attacks" />
                    <br />
                    <CypherTools.Blazor.Components.Character.CharacterAbilityList characterAbilities="character.Abilities"/>
                </div>
                <div class="col-lg-6">
                    <CypherTools.Blazor.Components.Character.CharacterSkillList characterSkills="character.Skills"/>
                    <br />                    
                    <CypherTools.Blazor.Components.Character.CharacterCypherList characterCyphers="character.Cyphers"/>
                    <br />
                    <CypherTools.Blazor.Components.Character.CypherCharacterArtifactList characterArtifacts="character.Artifacts"/>
                </div>
            </div>
        </div>
    </CascadingValue>

}


@code {
    [Parameter]
    public int id { get; set; } = 0;

    private CypherTools.Blazor.Models.Character character;

    protected override async Task OnInitializedAsync()
    {
        if (id == 0)
        {
            character = new Models.Character();
            character.Name = "New Character";

            character.Pools.Add(new Models.CharacterPool { Name = "Might", PoolIndex = 0, PoolMax = 10 });
            character.Pools.Add(new Models.CharacterPool { Name = "Speed", PoolIndex = 1, PoolMax = 10 });
            character.Pools.Add(new Models.CharacterPool { Name = "Intellect", PoolIndex = 2, PoolMax = 10 });

            character.RecoveryRolls.Add(new Models.CharacterRecoveryRoll { RollName = "1 Action", RollIndex = 0 });
            character.RecoveryRolls.Add(new Models.CharacterRecoveryRoll { RollName = "10 Minutes", RollIndex = 1 });
            character.RecoveryRolls.Add(new Models.CharacterRecoveryRoll { RollName = "1 Hour", RollIndex = 2 });
            character.RecoveryRolls.Add(new Models.CharacterRecoveryRoll { RollName = "10 Hours", RollIndex = 3 });

            character.RecoveryDie = 6;
            character.RecoveryMod = 1;

            Session.AddCharacter(character);
        }
        else
        {
            character = Session.UserCharacters.First(x => x.CharacterId == id);
        }
    }

    private async Task SaveCharacter()
    {
        await Session.SaveData();

        //if (character.CharacterId == 0)
        //{
        //    await Http.PostAsJsonAsync<CypherTools.Blazor.Models.Character>($"api/Character/", character);
        //}
        //else
        //{
        //    await Http.PutAsJsonAsync<CypherTools.Blazor.Models.Character>($"api/Character/{id}", character);
        //}
    }
}
